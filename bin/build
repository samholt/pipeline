#!/usr/bin/env node

let fs = require("fs"),
    path = require("path"),
    exec = require("child_process").execSync,
    mustache = require("mustache"),
    distill = require("distill-template"),
    analytics = require("./analytics");

// d3
let d3 = Object.assign({},
    require("d3-dsv"),
    require("d3-time-format"));

let jsdom = require("jsdom").jsdom,
    serializeDocument = require("jsdom").serializeDocument;

let RFC = d3.timeFormat("%a, %d %b %Y %H:%M:%S %Z");

let data = {
  now: Date.now(),
  nowRFC: RFC(Date.now())
}

// The journal data contains information about the distill journal:
data.journal = JSON.parse(fs.readFileSync("journal.json", "utf8"));

// Merge the posts data with the data housed in the local package.json files in each repo
data.posts = JSON.parse(fs.readFileSync("posts/posts.json", "utf8"));
data.posts.sort((a, b) => { return b.publishedDate - a.publishedDate; });

// TODO: should we nuke the docs/ folder prior to rebuilding?

data.posts.forEach((post, i) => {
  console.log("Building post " + (i + 1) + " of " + data.posts.length + ": " + post.githubPath);
  let repoPath = path.join("posts", post.githubPath);
  exec("mkdir -p " + path.join("docs", post.distillPath));

  // TODO: alert if we don't have a thumbnail?

  // Copy the contents of the repo's public folder to the new location.
  let publishedPath = path.join("docs", post.distillPath)
  try {
    exec("cp -r " + path.join(repoPath, "public/") + " " + publishedPath);
  } catch (e) {
    console.error("No public folder for " + repoPath);
  }

  //Transform and rewrite all the html files that are direct children of public/
  fs.readdirSync(publishedPath).forEach((f) => {
    if (path.extname(f) === ".html") {
      let htmlString = fs.readFileSync(path.join(publishedPath, f), "utf8");
      var dom = jsdom(htmlString, {features: {ProcessExternalResources: false, FetchExternalResources: false}});
      distill.render(dom, post);
      let transformedHtml =  serializeDocument(dom).replace("</body></html>", analytics + "</body></html>");
      fs.writeFileSync(path.join(publishedPath, f), transformedHtml, "utf8");
    }
  });

  // Generate crossref
  let crossrefXml = distill.generateCrossref(post);
  fs.writeFileSync(path.join(publishedPath, "crossref.xml"), crossrefXml, "utf8");

});

fs.writeFileSync("docs/index.html", mustache.render(fs.readFileSync("pages/index.html", "utf8") + analytics, data));
fs.writeFileSync("docs/rss.xml", mustache.render(fs.readFileSync("pages/rss.xml", "utf8") + analytics, data));
exec("cp node_modules/distill-template/dist/template.js docs/template.js");
exec("cp pages/CNAME docs/");
