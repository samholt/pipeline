#!/usr/bin/env node

var fs = require("fs"),
    exec = require("child_process").exec,
    queue = require("d3-queue"),
    request = require('request');

const concurrency = 10;
const templatePath = "build/distill-template/dist";

console.log("Beginning queue...");
let q = queue.queue(concurrency);

// Download latest template release from Github
q.defer(getLatestRelease, templatePath, "distillpub/template")

// Poll github for changes to:
// https://github.com/distillpub/template
q.defer(wget, templatePath, "https://github.com/distillpub/template/releases/download/v1.1.1/template.v1.js")
q.defer(wget, templatePath, "https://github.com/distillpub/template/releases/download/v1.1.1/template.v1.js.map")

// Poll github for changes to all the repos listed in
// build/distill-posts/posts.csv
let journalFile = fs.readFileSync("journal.json", "utf8");
let articles = JSON.parse(journalFile).articles;
articles.forEach(function(article) {
  var path = "build/posts/" + article.distillPath.trim();
  var remote = "https://github.com/" + article.githubPath.trim() + ".git";
  q.defer(poll, path, remote);
});

// Wait for all polling updates to the posts repos
q.awaitAll(function(error) {
  if (error) throw error;
  console.log("...queue done.");
});

function wget(path, remoteURL, callback) {
  console.log("Downloading: " + remoteURL);
  exec("mkdir -p " + path);
  exec("curl -L " + remoteURL + " --retry 5 > " + path + '/' + remoteURL.split('/').pop(), error => {
    if (error) throw error;
  });
}

function getLatestRelease(path, repo, callback) {
  console.log("Getting latest release: " + repo);
  let url = "https://api.github.com/repos/" + repo + "/releases/latest"
  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {
    url += '?client_id=' + process.env.GITHUB_CLIENT_ID + '&client_secret=' + process.env.GITHUB_CLIENT_SECRET
  }
  const options = {
    url: url,
    headers: {
      'User-Agent': 'distill-pipeline poll (headless; Linux x86_64, like node request)'
    }
  };
  request(options, (error, response, body) => {
    if (!error && response.statusCode === 200) {
      const response = JSON.parse(body)
      console.log("Latest release is tagged as " + response.tag_name);
      const links = response.assets.map((asset) => {
        return asset.browser_download_url;
      });
      for (const link of links) {
        wget(path, link);
      }
    } else {
      if (error) throw error;
      console.log("Got an error: ", error, ", status code: ", response.statusCode, body);
    }
  });
}

// Perform an async child process for git syncing processes
// that clone a remote repo if it doesn't exist, or pull it if it does exist.
function poll(path, remote, cb) {
  console.log("Polling: " + remote);
  let callback = cb;

  let exists;
  try {
    fs.accessSync(path, fs.F_OK);
    exists = true;
  } catch (e) {
    exists = false;
  }

  if (exists) {
    exec("git -C " + path + " pull", tags);
  } else {
    exec("git clone --depth 1 " + remote + " " + path, tags);
  }

  // Fetching tags from remote repository
  function tags(error) {
    if (error) throw error;
    exec("git -C " + path + " fetch --tags", error => {
      if (error) throw error;
      callback()
    });
  }

}
